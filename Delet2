waypoints:
  - position:
      x: 1.0
      y: -2.0
    orientation:
      z: -0.28
      w: 0.95
  - position:
      x: 4.0
      y: -3.0
    orientation:
      z: 0.707
      w: 0.95
  - position:
      x: 3.0
      y: -5.0
    orientation:
      z: 0.707
      w: 0.707
  - position:
      x: -7.0
      y: 1.0
    orientation:
      z: 0.707
      w: 0.707
  - position:
      x: 4.0
      y: 3.0
    orientation:
      z: 0.99
      w: 0.99



#! /usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import yaml
import os

def load_waypoints(yaml_path):
    with open(yaml_path, 'r') as f:
        data = yaml.safe_load(f)
        waypoints = data['waypoints']
        goal_poses = []
        for wp in waypoints:
            pose = PoseStamped()
            pose.header.frame_id = 'map'
            pose.header.stamp = Node().get_clock().now().to_msg()
            pose.pose.position.x = wp['position']['x']
            pose.pose.position.y = wp['position']['y']
            pose.pose.orientation.z = wp['orientation']['z']
            pose.pose.orientation.w = wp['orientation']['w']
            goal_poses.append(pose)
        return goal_poses

def main():
    rclpy.init()

    navigator = BasicNavigator()

    # Load waypoints from YAML
    yaml_path = os.path.join(os.path.dirname(__file__), 'waypoints.yaml')
    goal_poses = load_waypoints(yaml_path)

    # Initialize navigation
    navigator.lifecycleStartup() ###
    navigator.waitUntilNav2Active()

    # Get initial pose (for path verification)
    initial_pose = goal_poses[0]

    # Follow waypoints
    nav_start = navigator.get_clock().now()
    navigator.followWaypoints(goal_poses)

    while not navigator.isTaskComplete():
        feedback = navigator.getFeedback()
        if feedback:
            print('Executing current waypoint: ' +
                  str(feedback.current_waypoint + 1) + '/' + str(len(goal_poses)))

    # Handle task completion
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()
    rclpy.shutdown()

if __name__ == '__main__':
    main()










THIS CODE SEND A waypoints to the robot 

#! /usr/bin/env python3
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.duration import Duration

"""
navigation turtlebot to go to poses.
"""


def main():
    rclpy.init()

    navigator = BasicNavigator()

    initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.2
    initial_pose.pose.position.y = -1.0
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95
    # navigator.setInitialPose(initial_pose)

    navigator.lifecycleStartup() ###

    navigator.waitUntilNav2Active()

    goal_poses = []

    goal_pose1 = PoseStamped()
    goal_pose1.header.frame_id = 'map'
    goal_pose1.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose1.pose.position.x = 1.0
    goal_pose1.pose.position.y = -2.0
    goal_pose1.pose.orientation.w = -0.28
    goal_pose1.pose.orientation.z = 0.95
    goal_poses.append(goal_pose1)

    goal_pose2 = PoseStamped()
    goal_pose2.header.frame_id = 'map'
    goal_pose2.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose2.pose.position.x = 4.0
    goal_pose2.pose.position.y = -3.0
    goal_pose2.pose.orientation.w = 0.95
    goal_pose2.pose.orientation.z = 0.707
    goal_poses.append(goal_pose2)

    goal_pose3 = PoseStamped()
    goal_pose3.header.frame_id = 'map'
    goal_pose3.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose3.pose.position.x = 3.0
    goal_pose3.pose.position.y = -5.0
    goal_pose3.pose.orientation.w = 0.707
    goal_pose3.pose.orientation.z = 0.707
    goal_poses.append(goal_pose3)

    goal_pose4 = PoseStamped()
    goal_pose4.header.frame_id = 'map'
    goal_pose4.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose4.pose.position.x = -7.0
    goal_pose4.pose.position.y = 1.0
    goal_pose4.pose.orientation.w = 0.707
    goal_pose4.pose.orientation.z = 0.707
    goal_poses.append(goal_pose4)

    goal_pose5 = PoseStamped()
    goal_pose5.header.frame_id = 'map'
    goal_pose5.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose5.pose.position.x = 4.0
    goal_pose5.pose.position.y = 3.0
    goal_pose5.pose.orientation.w = 0.99
    goal_pose5.pose.orientation.z = 0.99
    goal_poses.append(goal_pose5)




    # sanity check a valid path exists
    navigator.getPath(initial_pose, goal_poses)

    nav_start = navigator.get_clock().now()
    navigator.followWaypoints(goal_poses)

    i = 0
    while not navigator.isTaskComplete():

        i = i + 1
        feedback = navigator.getFeedback()
        if feedback and i % 5 == 0:
            print('Executing current waypoint: ' +
                  str(feedback.current_waypoint + 1) + '/' + str(len(goal_poses)))
            now = navigator.get_clock().now()

            # Some navigation timeout to demo cancellation
            if now - nav_start > Duration(seconds=600.0):
                navigator.cancelTask()

    # Do something depending on the return code
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()

    exit(0)


if __name__ == '__main__':
    main()


I want to make thoses cordinate in a config file .yaml and integrate it in this code so it will be the same results 
