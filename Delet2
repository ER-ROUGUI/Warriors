#! /usr/bin/env python3
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from rclpy.duration import Duration

class PointFollower(Node):
    def __init__(self):
        super().__init__('point_follower')
        self.navigator = BasicNavigator()

        self.subscription = self.create_subscription(
            String,
            '/navigation_trigger',
            self.trigger_callback,
            10
        )
        self.subscription  # prevent unused variable warning

    def trigger_callback(self, msg):
        if msg.data == "Ding":
            self.navigate()

    def navigate(self):
        self.navigator.lifecycleStartup()
        self.navigator.waitUntilNav2Active()

        # Define your waypoints here
        goal_poses = [
            self.create_goal_pose(1.0, -2.0, -0.28, 0.95),
            self.create_goal_pose(4.0, -3.0, 0.707, 0.95),
            self.create_goal_pose(3.0, -5.0, 0.707, 0.707),
            self.create_goal_pose(-7.0, 1.0, 0.707, 0.707),
            self.create_goal_pose(4.0, 3.0, 0.99, 0.99)
        ]

        self.navigator.getPath(goal_poses[0], goal_poses)
        nav_start = self.navigator.get_clock().now()
        self.navigator.followWaypoints(goal_poses)

        while not self.navigator.isTaskComplete():
            feedback = self.navigator.getFeedback()
            if feedback:
                print(f'Executing current waypoint: {feedback.current_waypoint + 1}/{len(goal_poses)}')
            if self.navigator.get_clock().now() - nav_start > Duration(seconds=600.0):
                self.navigator.cancelTask()

        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('Goal succeeded!')
        elif result == TaskResult.CANCELED:
            print('Goal was canceled!')
        elif result == TaskResult.FAILED:
            print('Goal failed!')
        else:
            print('Goal has an invalid return status!')

        self.navigator.lifecycleShutdown()

    def create_goal_pose(self, x, y, z_orientation, w_orientation):
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.navigator.get_clock().now().to_msg()
        goal_pose.pose.position.x = x
        goal_pose.pose.position.y = y
        goal_pose.pose.orientation.z = z_orientation
        goal_pose.pose.orientation.w = w_orientation
        return goal_pose

def main(args=None):
    rclpy.init(args=args)
    point_follower = PointFollower()
    rclpy.spin(point_follower)
    point_follower.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()


#! /usr/bin/env python3
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.duration import Duration
from std_msgs.msg import String

class PointFollower(Node):
    def __init__(self):
        super().__init__('point_follower')
        self.navigator = BasicNavigator()

        self.subscription = self.create_subscription(
            String,
            '/navigation_trigger',
            self.trigger_callback,
            10
        )
        self.subscription  # prevent unused variable warning

    def trigger_callback(self, msg):
        if msg.data == "Ding":
            self.navigate()

    def navigate(self):
        self.navigator.lifecycleStartup()
        self.navigator.waitUntilNav2Active()

        goal_poses = [PoseStamped() for _ in range(5)]  # Your goal poses setup here
        # Set goals, header, etc., as previously defined

        self.navigator.getPath(goal_poses[0], goal_poses)
        nav_start = self.navigator.get_clock().now()
        self.navigator.followWaypoints(goal_poses)

        while not self.navigator.isTaskComplete():
            feedback = self.navigator.getFeedback()
            if feedback:
                print(f'Executing current waypoint: {feedback.current_waypoint + 1}/{len(goal_poses)}')
            if self.navigator.get_clock().now() - nav_start > Duration(seconds=600.0):
                self.navigator.cancelTask()

        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('Goal succeeded!')
        elif result == TaskResult.CANCELED:
            print('Goal was canceled!')
        elif result == TaskResult.FAILED:
            print('Goal failed!')
        else:
            print('Goal has an invalid return status!')

        self.navigator.lifecycleShutdown()

def main(args=None):
    rclpy.init(args=args)
    point_follower = PointFollower()
    rclpy.spin(point_follower)
    point_follower.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()



#! /usr/bin/env python3
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.duration import Duration

"""
navigation turtlebot to go to poses.
"""


def main():
    rclpy.init()

    navigator = BasicNavigator()

    initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.2
    initial_pose.pose.position.y = -1.0
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95
    # navigator.setInitialPose(initial_pose)

    navigator.lifecycleStartup() ###

    navigator.waitUntilNav2Active()

    goal_poses = []

    goal_pose1 = PoseStamped()
    goal_pose1.header.frame_id = 'map'
    goal_pose1.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose1.pose.position.x = 1.0
    goal_pose1.pose.position.y = -2.0
    goal_pose1.pose.orientation.w = -0.28
    goal_pose1.pose.orientation.z = 0.95
    goal_poses.append(goal_pose1)

    goal_pose2 = PoseStamped()
    goal_pose2.header.frame_id = 'map'
    goal_pose2.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose2.pose.position.x = 4.0
    goal_pose2.pose.position.y = -3.0
    goal_pose2.pose.orientation.w = 0.95
    goal_pose2.pose.orientation.z = 0.707
    goal_poses.append(goal_pose2)

    goal_pose3 = PoseStamped()
    goal_pose3.header.frame_id = 'map'
    goal_pose3.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose3.pose.position.x = 3.0
    goal_pose3.pose.position.y = -5.0
    goal_pose3.pose.orientation.w = 0.707
    goal_pose3.pose.orientation.z = 0.707
    goal_poses.append(goal_pose3)

    goal_pose4 = PoseStamped()
    goal_pose4.header.frame_id = 'map'
    goal_pose4.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose4.pose.position.x = -7.0
    goal_pose4.pose.position.y = 1.0
    goal_pose4.pose.orientation.w = 0.707
    goal_pose4.pose.orientation.z = 0.707
    goal_poses.append(goal_pose4)

    goal_pose5 = PoseStamped()
    goal_pose5.header.frame_id = 'map'
    goal_pose5.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose5.pose.position.x = 4.0
    goal_pose5.pose.position.y = 3.0
    goal_pose5.pose.orientation.w = 0.99
    goal_pose5.pose.orientation.z = 0.99
    goal_poses.append(goal_pose5)




    # sanity check a valid path exists
    navigator.getPath(initial_pose, goal_poses)

    nav_start = navigator.get_clock().now()
    navigator.followWaypoints(goal_poses)

    i = 0
    while not navigator.isTaskComplete():

        i = i + 1
        feedback = navigator.getFeedback()
        if feedback and i % 5 == 0:
            print('Executing current waypoint: ' +
                  str(feedback.current_waypoint + 1) + '/' + str(len(goal_poses)))
            now = navigator.get_clock().now()

            # Some navigation timeout to demo cancellation
            if now - nav_start > Duration(seconds=600.0):
                navigator.cancelTask()

    # Do something depending on the return code
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()

    exit(0)


if __name__ == '__main__':
    main()
