this is a taskmanager node 

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
import yaml

class TaskManager(Node):
    def __init__(self):
        super().__init__('task_manager')
        self.robot_specs = {}
        self.robot_navigators = {}  # Stores navigator instances or command publishers for each robot

        self.specs_subscription = self.create_subscription(
            String,
            '/robot_specifications',
            self.handle_robot_specs,
            10)

    def handle_robot_specs(self, msg):
        specs = yaml.safe_load(msg.data)
        robot_name = specs["robot_name"]
        self.robot_specs[robot_name] = specs
        self.get_logger().info(f'Received specs from {robot_name}: {specs}')

        # Initialize navigator for the robot if not already done
        if robot_name not in self.robot_navigators:
            self.robot_navigators[robot_name] = self.create_robot_navigator(robot_name)
            self.get_logger().info(f"Navigator initialized for {robot_name}")

        self.evaluate_task()

    def create_robot_navigator(self, robot_name):
        # This function creates a publisher for the specific robot
        navigator_publisher = self.create_publisher(
            PoseStamped,
            f'/{robot_name}/goal_pose',
            10)
        return navigator_publisher

    def handle_robot_pose(self, pose_msg, robot_name):
        # Update robot's position in the stored specifications
        if robot_name in self.robot_specs:
            self.robot_specs[robot_name]['current_location'] = [
                pose_msg.pose.position.x,
                pose_msg.pose.position.y
            ]
            self.get_logger().info(f"Updated position for {robot_name}: {self.robot_specs[robot_name]['current_location']}")

    def evaluate_task(self):
        # Example task processing logic here
        # Decide which robot to assign the task to based on criteria
        chosen_robot_name = "robot1"  # Placeholder for chosen robot based on your criteria
        self.assign_task(chosen_robot_name, [2.0, 3.0])

    def assign_task(self, robot_name, task_location):
        if robot_name in self.robot_navigators:
            goal_pose = PoseStamped()
            goal_pose.header.frame_id = 'map'
            goal_pose.header.stamp = self.get_clock().now().to_msg()
            goal_pose.pose.position.x = task_location[0]
            goal_pose.pose.position.y = task_location[1]
            goal_pose.pose.orientation.w = 1.0  # Assuming the robot faces the task directly

            self.get_logger().info(
                f"Assigning task to {robot_name}. Sending to location {task_location}"
            )
            # Publish the goal pose to the specific robot's navigator
            self.robot_navigators[robot_name].publish(goal_pose)

def main(args=None):
    rclpy.init(args=args)
    task_manager = TaskManager()
    rclpy.spin(task_manager)
    task_manager.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
