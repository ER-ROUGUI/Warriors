
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
import numpy as np
from yolov5 import YOLO  # Import the YOLO class from the yolov5 package

class ImagePublisher(Node):
    def __init__(self):
        super().__init__('image_publisher')
        self.publisher_ = self.create_publisher(Image, '/camera/image_raw/compressed', 10)
        self.bridge = CvBridge()
        self.cap = cv2.VideoCapture('rtsp://your_camera_ip/stream')  # Adjust the URL to your camera's specifications
        
        # Load your custom model
        self.model = YOLO('path_to_your_model.pt')  # Load the model

        self.timer_period = 0.1  # Adjust as needed
        self.timer = self.create_timer(self.timer_period, self.timer_callback)

    def timer_callback(self):
        ret, frame = self.cap.read()  # Read a frame from the camera
        if not ret:
            return

        # Run YOLO inference
        results = self.model(frame)

        # Extract results
        results.render()  # Apply the rendering directly on the frame

        # Encode the frame with bounding boxes
        _, compressed_image_data = cv2.imencode('.jpg', np.squeeze(results.imgs), [cv2.IMWRITE_JPEG_QUALITY, 20])
        compressed_image_data = compressed_image_data.tobytes()

        msg = Image()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.data = compressed_image_data
        msg.encoding = 'jpeg'
        self.publisher_.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    image_publisher = ImagePublisher()
    rclpy.spin(image_publisher)
    rclpy.shutdown()

if __name__ == '__main__':
    main()
