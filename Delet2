import rclpy
from rclpy.node import Node
import paho.mqtt.client as mqtt
import yaml
import json
import os
from geometry_msgs.msg import PoseStamped
from rclpy.duration import Duration
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult

class MQTTROS2Navigator(Node):
    def __init__(self):
        super().__init__('mqtt_ros2_navigator')
        # self.config = self.load_config(config_file)
        self.navigator = BasicNavigator()

        # Setup MQTT client
        self.config = self.load_config('mqtt_config.yaml')
        self.mqtt_client = mqtt.Client()
        self.mqtt_client.on_connect = self.on_connect
        self.mqtt_client.on_message = self.on_message
        self.mqtt_client.username_pw_set(self.config['mqtt_settings']['username'] , self.config['mqtt_settings']['password'])
        self.mqtt_client.connect(self.config['mqtt_settings']['mqtt_local_brocker'], self.config['mqtt_settings']['mqtt_port'], 60)
        self.mqtt_client.loop_start()

        # Initialize navigator
        self.init_navigator()

    
    def load_config(self, filename):
        base_path = os.path.dirname(__file__)
        config_path = os.path.join(base_path,'..' , 'config', filename)
        with open(config_path, 'r') as file:
            return yaml.safe_load(file)
        

    def on_connect(self, client, userdata, flags, rc):
        print(f"Connected with result code {rc}")
        client.subscribe(self.config['mqtt_settings']['mqtt_topic_pub'])

    def on_message(self, client, userdata, msg):
        message = msg.payload.decode("utf-8")
        self.process_message(message)

    def init_navigator(self):
        self.navigator.lifecycleStartup()
        self.navigator.waitUntilNav2Active()

    def process_message(self, message):
        try:
            data = json.loads(message)
            if "Action" in data and  data["Action"] == "navigate":
                self.set_goal()
        except json.JSONDecodeError as e:
            if message == "navigate" :
                self.set_goal()
            else:
                print(f"Error decoding JSON: {e}")

    def set_goal(self):
        initial_pose = PoseStamped()
        initial_pose.header.frame_id = 'map'
        initial_pose.header.stamp = self.navigator.get_clock().now().to_msg()
        initial_pose.pose.position.x = 0.358
        initial_pose.pose.position.y = 0.37589
        initial_pose.pose.orientation.z = -0.6285513
        initial_pose.pose.orientation.w = 0.777768099
        # self.navigator.setInitialPose(initial_pose)

        goal_poses = []

        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.navigator.get_clock().now().to_msg()
        goal_pose.pose.position.x = 1.0
        goal_pose.pose.position.y = 1.0
        goal_pose.pose.orientation.z = 0.95
        goal_pose.pose.orientation.w = 0.95
        goal_poses.append(goal_pose)

        goal_pose2 = PoseStamped()
        goal_pose2.header.frame_id = 'map'
        goal_pose2.header.stamp = self.navigator.get_clock().now().to_msg()
        goal_pose2.pose.position.x = 2.0
        goal_pose2.pose.position.y = 1.0
        goal_pose2.pose.orientation.z = 0.95
        goal_pose2.pose.orientation.w = 0.95
        goal_poses.append(goal_pose2)

        nav_start = self.navigator.get_clock().now()
        self.navigator.followWaypoints(goal_poses)

        i = 0
        while not self.navigator.isTaskComplete():

            i += 1
            feedback = self.navigator.getFeedback()
            if feedback and i % 5 == 0:
                print(
                    'Estimated distance remaining to goal position: '
                    + '{0:.3f}'.format(feedback.distance_to_goal)
                    + '\nCurrent speed of the robot: '
                    + '{0:.3f}'.format(feedback.speed)
                )
                now = self.navigator.get_clock().now()
                if now - nav_start > Duration(seconds=600.0):
                    self.navigator.cancelTask()


        # Do something depending on the return code
        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('Goal succeeded!')
        elif result == TaskResult.CANCELED:
            print('Goal was canceled!')
        elif result == TaskResult.FAILED:
            print('Goal failed!')
        else:
            print('Goal has an invalid return status!')

        self.navigator.lifecycleShutdown()

        exit(0)

def main(args=None):
    rclpy.init(args=args)
    navigator = MQTTROS2Navigator()
    rclpy.spin(navigator)
    navigator.cleanup()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
