# amcl_subscriber.py

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseWithCovarianceStamped

class AMCLSubscriber(Node):
    def __init__(self):
        super().__init__('amcl_subscriber')
        self.subscription = self.create_subscription(
            PoseWithCovarianceStamped,
            '/amcl_pose',
            self.amcl_pose_callback,
            10)
        self.latest_pose = None

    def amcl_pose_callback(self, msg):
        self.latest_pose = msg.pose.pose
        self.get_logger().info('Received new pose from AMCL.')















from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.node import Node

class Navigator(Node):
    def __init__(self):
        super().__init__('navigator_node')
        self.navigator = BasicNavigator()
        self.initial_pose_set = False
        self.initial_pose_subscriber = self.create_subscription(
            PoseWithCovarianceStamped,
            '/amcl_pose',
            self.initial_pose_callback,
            10
        )

    def initial_pose_callback(self, msg):
        if not self.initial_pose_set:
            initial_pose = PoseStamped()
            initial_pose.header = msg.header  # Use the same header from the AMCL message
            initial_pose.pose.position.x = msg.pose.pose.position.x
            initial_pose.pose.position.y = msg.pose.pose.position.y
            initial_pose.pose.position.z = msg.pose.pose.position.z
            initial_pose.pose.orientation.x = msg.pose.pose.orientation.x
            initial_pose.pose.orientation.y = msg.pose.pose.orientation.y
            initial_pose.pose.orientation.z = msg.pose.pose.orientation.z
            initial_pose.pose.orientation.w = msg.pose.pose.orientation.w
            self.initial_pose = initial_pose
            self.initial_pose_set = True
            self.get_logger().info('Initial pose set from AMCL.')
            self.set_initial_pose()

    def set_initial_pose(self):
        self.navigator.setInitialPose(self.initial_pose)
        self.navigator.waitUntilNav2Active()

        # Define the goal pose
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.navigator.get_clock().now().to_msg()
        goal_pose.pose.position.x = 1.0
        goal_pose.pose.position.y = -2.0
        goal_pose.pose.orientation.w = 0.95

        # Get and follow path
        path = self.navigator.getPath(self.initial_pose, goal_pose)
        smoothed_path = self.navigator.smoothPath(path)
        self.navigator.followPath(smoothed_path)

        while not self.navigator.isTaskComplete():
            feedback = self.navigator.getFeedback()
            if feedback:
                print(
                    'Estimated distance remaining to goal position: '
                    + '{0:.3f}'.format(feedback.distance_to_goal)
                    + '\nCurrent speed of the robot: '
                    + '{0:.3f}'.format(feedback.speed)
                )

        # Handle task result
        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('Goal succeeded!')
        elif result == TaskResult.CANCELED:
            print('Goal was canceled!')
        elif result == TaskResult.FAILED:
            print('Goal failed!')
        else:
            print('Goal has an invalid return status!')

        self.navigator.lifecycleShutdown()
        rclpy.shutdown()

def main():
    rclpy.init()
    navigator_node = Navigator()
    rclpy.spin(navigator_node)
    navigator_node.destroy_node()

if __name__ == '__main__':
    main()




in amcl_pose topic  we have thsi 


header:
  stamp:
    sec: 1713959117
    nanosec: 622682263
  frame_id: map
pose:
  pose:
    position:
      x: 1.0114126020620315
      y: -1.5911397532342728
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: -0.2877354894650219
      w: 0.9577099185569314
  covariance:
  - 0.3262295197124534
  - -0.02553592486351896

take this code and add a subscriber to /amcl_pose and take those cordinate make it in place of initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.448
    initial_pose.pose.position.y = -1.13
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95



from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy


## just for testing


def main():
    rclpy.init()

    navigator = BasicNavigator()

    # Set our demo's initial pose
    initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.448
    initial_pose.pose.position.y = -1.13
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95
    # navigator.setInitialPose(initial_pose)

    navigator.waitUntilNav2Active()

    goal_pose = PoseStamped()
    goal_pose.header.frame_id = 'map'
    goal_pose.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose.pose.position.x = 1.0
    goal_pose.pose.position.y = -2.0
    goal_pose.pose.orientation.w = 0.95

    path = navigator.getPath(initial_pose, goal_pose)
    smoothed_path = navigator.smoothPath(path)

    # Follow path
    navigator.followPath(smoothed_path)

    i = 0
    while not navigator.isTaskComplete():

        i += 1
        feedback = navigator.getFeedback()
        if feedback and i % 5 == 0:
            print(
                'Estimated distance remaining to goal position: '
                + '{0:.3f}'.format(feedback.distance_to_goal)
                + '\nCurrent speed of the robot: '
                + '{0:.3f}'.format(feedback.speed)
            )

    # Do something depending on the return code
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()

    exit(0)


if __name__ == '__main__':
    main()
