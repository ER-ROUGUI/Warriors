import rclpy
from rclpy.node import Node
import paho.mqtt.client as mqtt
from std_msgs.msg import String

class MQTTSubscriber(Node):
    def __init__(self):
        super().__init__('mqtt_subscriber')
        self.publisher_ = self.create_publisher(String, 'ros_topic_from_mqtt', 10)
        self.mqtt_client = mqtt.Client()
        self.mqtt_client.on_connect = self.on_connect
        self.mqtt_client.on_message = self.on_message
        self.mqtt_client.connect("192.168.10.143", 1883, 60)
        self.mqtt_client.loop_start()

    def on_connect(self, client, userdata, flags, rc):
        self.get_logger().info("Connected with result code "+str(rc))
        self.mqtt_client.subscribe("homein/core/iot/noises")

    def on_message(self, client, userdata, msg):
        message = str(msg.payload.decode("utf-8"))
        self.get_logger().info(f"Received '{message}' from MQTT")
        # Here you can parse the message and check conditions
        if "Cough" in message:
            ros_msg = String()
            ros_msg.data = "Detected Cough"
            self.publisher_.publish(ros_msg)

def main(args=None):
    rclpy.init(args=args)
    mqtt_subscriber = MQTTSubscriber()
    rclpy.spin(mqtt_subscriber)
    mqtt_subscriber.mqtt_client.loop_stop()
    mqtt_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()





this is how i use command line to listen to the topic on the pecific ip and port 

mosquitto_sub -h 192.168.10.143 -t homein/# -p 1883 -v
homein/core/iot/noises {"id": "1715075978", "timestamp": 1715075978850, "data": {"function": "NoiseSensor", "event": "Noise", "category": "Cough", "score": 0.96358025, "objectId": "Miaou"}, "type": "IOT", "subtype": "UPDATE", "source": "imanualv10"}

update the previous subsciber to get the "Cough" and make a condition on it 



import rclpy
from rclpy.node import Node
import json
from std_msgs.msg import String

class MQTTSubscriber(Node):
    def __init__(self):
        super().__init__('mqtt_subscriber')
        self.subscription = self.create_subscription(
            String, 
            'homein/core/iot/noises', 
            self.listener_callback, 
            10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        self.get_logger().info(f"Received data: {msg.data}")
        try:
            data = json.loads(msg.data)
            if data['data']['category'] == "Cough":
                self.get_logger().info(f"Cough detected with score: {data['data']['score']}")
                # Condition to trigger another action or service call
                self.handle_cough_detected()
        except json.JSONDecodeError as e:
            self.get_logger().error(f"Failed to decode JSON: {e}")
        except KeyError as e:
            self.get_logger().error(f"Missing expected data in message: {e}")

    def handle_cough_detected(self):
        # This function should include the actions to be performed when "Cough" is detected
        self.get_logger().info("Handling cough detection...")
        # Example: Trigger a navigation task or send a notification

def main(args=None):
    rclpy.init(args=args)
    mqtt_subscriber = MQTTSubscriber()
    rclpy.spin(mqtt_subscriber)
    mqtt_subscriber.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
