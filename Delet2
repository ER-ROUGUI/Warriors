import paho.mqtt.client as mqtt
import yaml
import os

# Load configuration from YAML file
def load_config(filename):
    base_path = os.path.dirname(__file__)
    config_path = os.path.join(base_path, 'config', filename)
    with open(config_path, 'r') as file:
        return yaml.safe_load(file)

config = load_config('mqtt_config.yaml')
mqtt_settings = config['mqtt_settings']

# Define the MQTT Client
def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    client.subscribe(mqtt_settings['mqtt_topic_pub'])

def on_message(client, userdata, msg):
    message = msg.payload.decode("utf-8")
    print(f"Received message from topic '{msg.topic}': {message}")

def main():
    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    # Connect to the local broker
    client.connect(mqtt_settings['mqtt_local_brocker'], mqtt_settings['mqtt_port'], 60)

    # Blocking call that processes network traffic, dispatches callbacks, and handles reconnecting.
    client.loop_forever()

if __name__ == "__main__":
    main()



use like this 

this is the config 
mqtt_settings: 
  mqtt_brocker: "192.168.10.182" 
  mqtt_local_brocker: "localhost"
  mqtt_port: 1883
  mqtt_topic_sub: homein/core/iot/# #/homein/core/iot/# << the same thing !!
  mqtt_topic_pub: /suspicious

this is the node taht subscriber the external topic and publish after processing 


import paho.mqtt.client as mqtt
import yaml
import json
import os

"""
this code will subscriber to the mqtt topic sent by IOT Manager then send an suspicious info via MQTT topic to the Task manager
"""

# mqtt_config_file = "/app/augmented-robots/server/nux_ws/src/IOT_Manager/Suspicious_extension/config/config_file.yaml"

def load_config(filename):

    base_path = os.path.dirname(__file__)
    config_path = os.path.join(base_path , 'config' , filename)
    with open(config_path , 'r') as file :

        return yaml.safe_load(file)


config = load_config('mqtt_config.yaml')
# print(config)
mqtt_settings = config['mqtt_settings']

def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))
    client.subscribe(mqtt_settings['mqtt_topic_sub'])


def on_message(client, userdata, msg):

    message = msg.payload.decode("utf-8")
    print(f"Received '{message}' from topic '{msg.topic}'")
    try:
        data = json.loads(message)
        if data["data"]["category"] == "Ding" :
            if data["data"]["score"] > 0.6 :


                # if "Key" in data and data["Key"] == "something" :
                response = "suspecious"

                client.publish(mqtt_settings['mqtt_topic_pub'], response)
                print(response)

        else:

            print("evrything is normal (: ")

    except json.JSONDecodeError as e:
        print(f"Error: {e}")
def main():

    client = mqtt.Client()
    client.on_connect = on_connect
    client.on_message = on_message

    client.connect(mqtt_settings['mqtt_brocker'] , mqtt_settings['mqtt_port'] , 60)
    client.loop_forever()

if __name__ == "__main__" :
    main()

give the node that will subscribe 
