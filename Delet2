# Filename: mqtt_bridge.py

import rclpy
from rclpy.node import Node
from std_msgs.msg import String
import paho.mqtt.client as mqtt

class ROS2MQTTBridge(Node):
    def __init__(self):
        super().__init__('ros2_mqtt_bridge')
        self.subscription = self.create_subscription(
            String, 
            'topic_to_subscribe', 
            self.listener_callback, 
            10)
        self.subscription  # prevent unused variable warning
        
        self.mqtt_client = mqtt.Client("ros2_bridge")
        self.mqtt_client.connect("localhost", 1883, 60)
        self.mqtt_client.loop_start()

    def listener_callback(self, msg):
        self.get_logger().info('Forwarding: "%s"' % msg.data)
        self.mqtt_client.publish('mqtt_topic', msg.data)

def main(args=None):
    rclpy.init(args=args)
    bridge = ROS2MQTTBridge()
    rclpy.spin(bridge)
    bridge.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()






import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import PoseWithCovarianceStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult

class MainNavigator(Node):
    def __init__(self):
        super().__init__('main_navigator')
        self.navigator = BasicNavigator()
        self.subscription = self.create_subscription(
            PoseWithCovarianceStamped,
            '/amcl_pose',
            self.amcl_pose_callback,
            10)
        self.initial_pose_set = False

    def amcl_pose_callback(self, msg):
        if not self.initial_pose_set:
            initial_pose = PoseStamped()
            initial_pose.header = msg.header
            initial_pose.pose = msg.pose.pose
            self.navigator.setInitialPose(initial_pose)
            self.get_logger().info('Initial pose set from AMCL.')
            self.initial_pose_set = True
            self.start_navigation()

    def start_navigation(self):
        self.navigator.waitUntilNav2Active()
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.pose.position.x = 1.0  # Set your goal position
        goal_pose.pose.position.y = -2.0
        goal_pose.pose.orientation.w = 1.0
        self.navigator.goToPose(goal_pose)

        while not self.navigator.isTaskComplete():
            rclpy.spin_once(self)
            feedback = self.navigator.getFeedback()
            if feedback:
                self.get_logger().info(f'Distance to goal: {feedback.distance_to_goal:.2f} meters')

        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            self.get_logger().info('Navigation succeeded!')
        else:
            self.get_logger().info('Navigation failed or was canceled.')

def main(args=None):
    rclpy.init(args=args)
    navigator = MainNavigator()
    rclpy.spin(navigator)
    navigator.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()








# amcl_subscriber.py

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseWithCovarianceStamped
from shared_state import SharedState

class AMCLSubscriber(Node):
    def __init__(self, shared_state):
        super().__init__('amcl_subscriber')
        # Initialize the shared state
        self.shared_state = shared_state
        # Create a subscription to the /amcl_pose topic
        self.subscription = self.create_subscription(
            PoseWithCovarianceStamped,
            '/amcl_pose',
            self.amcl_pose_callback,
            10
        )
        self.get_logger().info("AMCL Subscriber started and listening on /amcl_pose")

    def amcl_pose_callback(self, msg):
        """Handle new pose messages from the AMCL."""
        # Update the shared state with the latest pose
        self.shared_state.pose = msg.pose.pose
        self.shared_state.updated = True
        self.get_logger().info('Updated pose received from AMCL.')


# main_navigation_script.py

from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from amcl_subscriber import AMCLSubscriber
from shared_state import SharedState

def main():
    rclpy.init()

    shared_state = SharedState()
    navigator = BasicNavigator()
    amcl_subscriber = AMCLSubscriber(shared_state)

    # Wait for the first valid pose update from AMCL
    while rclpy.ok():
        rclpy.spin_once(amcl_subscriber)
        if shared_state.updated:
            # Set the initial pose in the navigator
            initial_pose = PoseStamped()
            initial_pose.header.frame_id = 'map'
            initial_pose.header.stamp = navigator.get_clock().now().to_msg()
            initial_pose.pose = shared_state.pose
            navigator.setInitialPose(initial_pose)
            shared_state.updated = False  # Reset the flag
            print("Initial pose set. Proceeding with navigation...")
            break

    navigator.waitUntilNav2Active()

    # Define a goal pose
    goal_pose = PoseStamped()
    goal_pose.header.frame_id = 'map'
    goal_pose.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose.pose.position.x = 1.0  # Example coordinates
    goal_pose.pose.position.y = -2.0
    goal_pose.pose.orientation.w = 0.95

    # Plan and follow the path to the goal
    path = navigator.getPath(initial_pose, goal_pose)
    smoothed_path = navigator.smoothPath(path)
    navigator.followPath(smoothed_path)

    while not navigator.isTaskComplete():
        rclpy.spin_once(amcl_subscriber)

    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
















from geometry_msgs.msg import PoseStamped, PoseWithCovarianceStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.node import Node

class Navigator(Node):
    def __init__(self):
        super().__init__('navigator_node')
        self.navigator = BasicNavigator()
        self.initial_pose_set = False
        self.initial_pose_subscriber = self.create_subscription(
            PoseWithCovarianceStamped,
            '/amcl_pose',
            self.initial_pose_callback,
            10
        )

    def initial_pose_callback(self, msg):
        if not self.initial_pose_set:
            initial_pose = PoseStamped()
            initial_pose.header = msg.header  # Use the same header from the AMCL message
            initial_pose.pose.position.x = msg.pose.pose.position.x
            initial_pose.pose.position.y = msg.pose.pose.position.y
            initial_pose.pose.position.z = msg.pose.pose.position.z
            initial_pose.pose.orientation.x = msg.pose.pose.orientation.x
            initial_pose.pose.orientation.y = msg.pose.pose.orientation.y
            initial_pose.pose.orientation.z = msg.pose.pose.orientation.z
            initial_pose.pose.orientation.w = msg.pose.pose.orientation.w
            self.initial_pose = initial_pose
            self.initial_pose_set = True
            self.get_logger().info('Initial pose set from AMCL.')
            self.set_initial_pose()

    def set_initial_pose(self):
        self.navigator.setInitialPose(self.initial_pose)
        self.navigator.waitUntilNav2Active()

        # Define the goal pose
        goal_pose = PoseStamped()
        goal_pose.header.frame_id = 'map'
        goal_pose.header.stamp = self.navigator.get_clock().now().to_msg()
        goal_pose.pose.position.x = 1.0
        goal_pose.pose.position.y = -2.0
        goal_pose.pose.orientation.w = 0.95

        # Get and follow path
        path = self.navigator.getPath(self.initial_pose, goal_pose)
        smoothed_path = self.navigator.smoothPath(path)
        self.navigator.followPath(smoothed_path)

        while not self.navigator.isTaskComplete():
            feedback = self.navigator.getFeedback()
            if feedback:
                print(
                    'Estimated distance remaining to goal position: '
                    + '{0:.3f}'.format(feedback.distance_to_goal)
                    + '\nCurrent speed of the robot: '
                    + '{0:.3f}'.format(feedback.speed)
                )

        # Handle task result
        result = self.navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('Goal succeeded!')
        elif result == TaskResult.CANCELED:
            print('Goal was canceled!')
        elif result == TaskResult.FAILED:
            print('Goal failed!')
        else:
            print('Goal has an invalid return status!')

        self.navigator.lifecycleShutdown()
        rclpy.shutdown()

def main():
    rclpy.init()
    navigator_node = Navigator()
    rclpy.spin(navigator_node)
    navigator_node.destroy_node()

if __name__ == '__main__':
    main()




in amcl_pose topic  we have thsi 


header:
  stamp:
    sec: 1713959117
    nanosec: 622682263
  frame_id: map
pose:
  pose:
    position:
      x: 1.0114126020620315
      y: -1.5911397532342728
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: -0.2877354894650219
      w: 0.9577099185569314
  covariance:
  - 0.3262295197124534
  - -0.02553592486351896

take this code and add a subscriber to /amcl_pose and take those cordinate make it in place of initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.448
    initial_pose.pose.position.y = -1.13
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95



from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy


## just for testing


def main():
    rclpy.init()

    navigator = BasicNavigator()

    # Set our demo's initial pose
    initial_pose = PoseStamped()
    initial_pose.header.frame_id = 'map'
    initial_pose.header.stamp = navigator.get_clock().now().to_msg()
    initial_pose.pose.position.x = 0.448
    initial_pose.pose.position.y = -1.13
    initial_pose.pose.orientation.z = -0.28
    initial_pose.pose.orientation.w = 0.95
    # navigator.setInitialPose(initial_pose)

    navigator.waitUntilNav2Active()

    goal_pose = PoseStamped()
    goal_pose.header.frame_id = 'map'
    goal_pose.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose.pose.position.x = 1.0
    goal_pose.pose.position.y = -2.0
    goal_pose.pose.orientation.w = 0.95

    path = navigator.getPath(initial_pose, goal_pose)
    smoothed_path = navigator.smoothPath(path)

    # Follow path
    navigator.followPath(smoothed_path)

    i = 0
    while not navigator.isTaskComplete():

        i += 1
        feedback = navigator.getFeedback()
        if feedback and i % 5 == 0:
            print(
                'Estimated distance remaining to goal position: '
                + '{0:.3f}'.format(feedback.distance_to_goal)
                + '\nCurrent speed of the robot: '
                + '{0:.3f}'.format(feedback.speed)
            )

    # Do something depending on the return code
    result = navigator.getResult()
    if result == TaskResult.SUCCEEDED:
        print('Goal succeeded!')
    elif result == TaskResult.CANCELED:
        print('Goal was canceled!')
    elif result == TaskResult.FAILED:
        print('Goal failed!')
    else:
        print('Goal has an invalid return status!')

    navigator.lifecycleShutdown()

    exit(0)


if __name__ == '__main__':
    main()
